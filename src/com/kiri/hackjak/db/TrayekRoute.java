package com.kiri.hackjak.db;

import java.util.List;
import com.kiri.hackjak.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TRAYEK_ROUTE.
 */
public class TrayekRoute {

    private Long id;
    /** Not-null value. */
    private String namaRute;
    private long idTrayek;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TrayekRouteDao myDao;

    private Trayek trayek;
    private Long trayek__resolvedKey;

    private List<TrayekRouteDetail> detailRute;

    public TrayekRoute() {
    }

    public TrayekRoute(Long id) {
        this.id = id;
    }

    public TrayekRoute(Long id, String namaRute, long idTrayek) {
        this.id = id;
        this.namaRute = namaRute;
        this.idTrayek = idTrayek;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTrayekRouteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getNamaRute() {
        return namaRute;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNamaRute(String namaRute) {
        this.namaRute = namaRute;
    }

    public long getIdTrayek() {
        return idTrayek;
    }

    public void setIdTrayek(long idTrayek) {
        this.idTrayek = idTrayek;
    }

    /** To-one relationship, resolved on first access. */
    public Trayek getTrayek() {
        long __key = this.idTrayek;
        if (trayek__resolvedKey == null || !trayek__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrayekDao targetDao = daoSession.getTrayekDao();
            Trayek trayekNew = targetDao.load(__key);
            synchronized (this) {
                trayek = trayekNew;
            	trayek__resolvedKey = __key;
            }
        }
        return trayek;
    }

    public void setTrayek(Trayek trayek) {
        if (trayek == null) {
            throw new DaoException("To-one property 'idTrayek' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.trayek = trayek;
            idTrayek = trayek.get_id();
            trayek__resolvedKey = idTrayek;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TrayekRouteDetail> getDetailRute() {
        if (detailRute == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrayekRouteDetailDao targetDao = daoSession.getTrayekRouteDetailDao();
            List<TrayekRouteDetail> detailRuteNew = targetDao._queryTrayekRoute_DetailRute(id);
            synchronized (this) {
                if(detailRute == null) {
                    detailRute = detailRuteNew;
                }
            }
        }
        return detailRute;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDetailRute() {
        detailRute = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
