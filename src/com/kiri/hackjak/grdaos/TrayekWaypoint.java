package com.kiri.hackjak.grdaos;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TRAYEK_WAYPOINT.
 */
public class TrayekWaypoint {

	private Long id;
	/** Not-null value. */
	private String point;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient TrayekWaypointDao myDao;

	private List<TrayekRouteDetail> ruteVia;

	public TrayekWaypoint() {
	}

	public TrayekWaypoint(Long id) {
		this.id = id;
	}

	public TrayekWaypoint(Long id, String point) {
		this.id = id;
		this.point = point;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getTrayekWaypointDao() : null;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	/** Not-null value. */
	public String getPoint() {
		return point;
	}

	/**
	 * Not-null value; ensure this value is available before it is saved to the
	 * database.
	 */
	public void setPoint(String point) {
		this.point = point;
	}

	/**
	 * To-many relationship, resolved on first access (and after reset). Changes
	 * to to-many relations are not persisted, make changes to the target
	 * entity.
	 */
	public List<TrayekRouteDetail> getRuteVia() {
		if (ruteVia == null) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			TrayekRouteDetailDao targetDao = daoSession
					.getTrayekRouteDetailDao();
			List<TrayekRouteDetail> ruteViaNew = targetDao
					._queryTrayekWaypoint_RuteVia(id);
			synchronized (this) {
				if (ruteVia == null) {
					ruteVia = ruteViaNew;
				}
			}
		}
		return ruteVia;
	}

	/**
	 * Resets a to-many relationship, making the next get call to query for a
	 * fresh result.
	 */
	public synchronized void resetRuteVia() {
		ruteVia = null;
	}

	/**
	 * Convenient call for {@link AbstractDao#delete(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#update(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must
	 * attached to an entity context.
	 */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

	@Override
	public String toString() {
		return point;
	}
}
