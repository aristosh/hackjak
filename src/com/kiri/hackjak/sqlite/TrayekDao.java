package com.kiri.hackjak.sqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kiri.hackjak.sqlite.Trayek;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRAYEK.
*/
public class TrayekDao extends AbstractDao<Trayek, Long> {

    public static final String TABLENAME = "TRAYEK";

    /**
     * Properties of entity Trayek.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Notrayek = new Property(2, String.class, "notrayek", false, "NOTRAYEK");
        public final static Property Kategori = new Property(3, String.class, "kategori", false, "KATEGORI");
        public final static Property Namasingkat = new Property(4, String.class, "namasingkat", false, "NAMASINGKAT");
        public final static Property Route = new Property(5, String.class, "route", false, "ROUTE");
    };


    public TrayekDao(DaoConfig config) {
        super(config);
    }
    
    public TrayekDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRAYEK' (" + //
                "'_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "'ID' TEXT UNIQUE ," + // 1: id
                "'NOTRAYEK' TEXT NOT NULL ," + // 2: notrayek
                "'KATEGORI' TEXT NOT NULL ," + // 3: kategori
                "'NAMASINGKAT' TEXT," + // 4: namasingkat
                "'ROUTE' TEXT);"); // 5: route
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRAYEK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Trayek entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
        stmt.bindString(3, entity.getNotrayek());
        stmt.bindString(4, entity.getKategori());
 
        String namasingkat = entity.getNamasingkat();
        if (namasingkat != null) {
            stmt.bindString(5, namasingkat);
        }
 
        String route = entity.getRoute();
        if (route != null) {
            stmt.bindString(6, route);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Trayek readEntity(Cursor cursor, int offset) {
        Trayek entity = new Trayek( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.getString(offset + 2), // notrayek
            cursor.getString(offset + 3), // kategori
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // namasingkat
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // route
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Trayek entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNotrayek(cursor.getString(offset + 2));
        entity.setKategori(cursor.getString(offset + 3));
        entity.setNamasingkat(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRoute(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Trayek entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Trayek entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
