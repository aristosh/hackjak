package com.kiri.hackjak.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.kiri.hackjak.db.TrayekRouteDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRAYEK_ROUTE_DETAIL.
*/
public class TrayekRouteDetailDao extends AbstractDao<TrayekRouteDetail, Long> {

    public static final String TABLENAME = "TRAYEK_ROUTE_DETAIL";

    /**
     * Properties of entity TrayekRouteDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdWaypoint = new Property(1, long.class, "idWaypoint", false, "ID_WAYPOINT");
        public final static Property IdRuteTrayek = new Property(2, long.class, "idRuteTrayek", false, "ID_RUTE_TRAYEK");
        public final static Property Urut = new Property(3, int.class, "urut", false, "URUT");
    };

    private DaoSession daoSession;

    private Query<TrayekRouteDetail> trayekRoute_DetailRuteQuery;
    private Query<TrayekRouteDetail> trayekWaypoint_RuteViaQuery;

    public TrayekRouteDetailDao(DaoConfig config) {
        super(config);
    }
    
    public TrayekRouteDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRAYEK_ROUTE_DETAIL' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ID_WAYPOINT' INTEGER NOT NULL ," + // 1: idWaypoint
                "'ID_RUTE_TRAYEK' INTEGER NOT NULL ," + // 2: idRuteTrayek
                "'URUT' INTEGER NOT NULL );"); // 3: urut
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRAYEK_ROUTE_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrayekRouteDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdWaypoint());
        stmt.bindLong(3, entity.getIdRuteTrayek());
        stmt.bindLong(4, entity.getUrut());
    }

    @Override
    protected void attachEntity(TrayekRouteDetail entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrayekRouteDetail readEntity(Cursor cursor, int offset) {
        TrayekRouteDetail entity = new TrayekRouteDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // idWaypoint
            cursor.getLong(offset + 2), // idRuteTrayek
            cursor.getInt(offset + 3) // urut
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrayekRouteDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdWaypoint(cursor.getLong(offset + 1));
        entity.setIdRuteTrayek(cursor.getLong(offset + 2));
        entity.setUrut(cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrayekRouteDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrayekRouteDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "detailRute" to-many relationship of TrayekRoute. */
    public List<TrayekRouteDetail> _queryTrayekRoute_DetailRute(long idRuteTrayek) {
        synchronized (this) {
            if (trayekRoute_DetailRuteQuery == null) {
                QueryBuilder<TrayekRouteDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdRuteTrayek.eq(null));
                queryBuilder.orderRaw("URUT ASC");
                trayekRoute_DetailRuteQuery = queryBuilder.build();
            }
        }
        Query<TrayekRouteDetail> query = trayekRoute_DetailRuteQuery.forCurrentThread();
        query.setParameter(0, idRuteTrayek);
        return query.list();
    }

    /** Internal query to resolve the "ruteVia" to-many relationship of TrayekWaypoint. */
    public List<TrayekRouteDetail> _queryTrayekWaypoint_RuteVia(long idWaypoint) {
        synchronized (this) {
            if (trayekWaypoint_RuteViaQuery == null) {
                QueryBuilder<TrayekRouteDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.IdWaypoint.eq(null));
                trayekWaypoint_RuteViaQuery = queryBuilder.build();
            }
        }
        Query<TrayekRouteDetail> query = trayekWaypoint_RuteViaQuery.forCurrentThread();
        query.setParameter(0, idWaypoint);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTrayekRouteDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTrayekWaypointDao().getAllColumns());
            builder.append(" FROM TRAYEK_ROUTE_DETAIL T");
            builder.append(" LEFT JOIN TRAYEK_ROUTE T0 ON T.'ID_RUTE_TRAYEK'=T0.'_id'");
            builder.append(" LEFT JOIN TRAYEK_WAYPOINT T1 ON T.'ID_WAYPOINT'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TrayekRouteDetail loadCurrentDeep(Cursor cursor, boolean lock) {
        TrayekRouteDetail entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TrayekRoute trayekRoute = loadCurrentOther(daoSession.getTrayekRouteDao(), cursor, offset);
         if(trayekRoute != null) {
            entity.setTrayekRoute(trayekRoute);
        }
        offset += daoSession.getTrayekRouteDao().getAllColumns().length;

        TrayekWaypoint trayekWaypoint = loadCurrentOther(daoSession.getTrayekWaypointDao(), cursor, offset);
         if(trayekWaypoint != null) {
            entity.setTrayekWaypoint(trayekWaypoint);
        }

        return entity;    
    }

    public TrayekRouteDetail loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TrayekRouteDetail> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TrayekRouteDetail> list = new ArrayList<TrayekRouteDetail>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TrayekRouteDetail> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TrayekRouteDetail> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
