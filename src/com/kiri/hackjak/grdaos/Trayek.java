package com.kiri.hackjak.grdaos;

import java.util.List;
import com.kiri.hackjak.grdaos.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table TRAYEK.
 */
public class Trayek {

    private Long _id;
    private String id;
    /** Not-null value. */
    private String jenisAngkutan;
    private String jenisTrayek;
    private String noTrayek;
    private String namaTrayek;
    private String terminal;
    private String kodeWilayah;
    private String wilayah;
    private String sukuDinas;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TrayekDao myDao;

    private List<TrayekRoute> rute;

    public Trayek() {
    }

    public Trayek(Long _id) {
        this._id = _id;
    }

    public Trayek(Long _id, String id, String jenisAngkutan, String jenisTrayek, String noTrayek, String namaTrayek, String terminal, String kodeWilayah, String wilayah, String sukuDinas) {
        this._id = _id;
        this.id = id;
        this.jenisAngkutan = jenisAngkutan;
        this.jenisTrayek = jenisTrayek;
        this.noTrayek = noTrayek;
        this.namaTrayek = namaTrayek;
        this.terminal = terminal;
        this.kodeWilayah = kodeWilayah;
        this.wilayah = wilayah;
        this.sukuDinas = sukuDinas;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTrayekDao() : null;
    }

    public Long get_id() {
        return _id;
    }

    public void set_id(Long _id) {
        this._id = _id;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getJenisAngkutan() {
        return jenisAngkutan;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setJenisAngkutan(String jenisAngkutan) {
        this.jenisAngkutan = jenisAngkutan;
    }

    public String getJenisTrayek() {
        return jenisTrayek;
    }

    public void setJenisTrayek(String jenisTrayek) {
        this.jenisTrayek = jenisTrayek;
    }

    public String getNoTrayek() {
        return noTrayek;
    }

    public void setNoTrayek(String noTrayek) {
        this.noTrayek = noTrayek;
    }

    public String getNamaTrayek() {
        return namaTrayek;
    }

    public void setNamaTrayek(String namaTrayek) {
        this.namaTrayek = namaTrayek;
    }

    public String getTerminal() {
        return terminal;
    }

    public void setTerminal(String terminal) {
        this.terminal = terminal;
    }

    public String getKodeWilayah() {
        return kodeWilayah;
    }

    public void setKodeWilayah(String kodeWilayah) {
        this.kodeWilayah = kodeWilayah;
    }

    public String getWilayah() {
        return wilayah;
    }

    public void setWilayah(String wilayah) {
        this.wilayah = wilayah;
    }

    public String getSukuDinas() {
        return sukuDinas;
    }

    public void setSukuDinas(String sukuDinas) {
        this.sukuDinas = sukuDinas;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<TrayekRoute> getRute() {
        if (rute == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrayekRouteDao targetDao = daoSession.getTrayekRouteDao();
            List<TrayekRoute> ruteNew = targetDao._queryTrayek_Rute(_id);
            synchronized (this) {
                if(rute == null) {
                    rute = ruteNew;
                }
            }
        }
        return rute;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRute() {
        rute = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
